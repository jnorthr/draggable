////
/// Components
/// StackedList
////

@import '../../styles/utilities/layout';
@import './props';
@import '../Handle/props';
@import '../Patterns/props';

.StackedListWrapper {
  @include stripes-loose-bg;
  position: relative;
  box-shadow: inset 0 0 0 $border-size-unit get-color(coal, dark);
}

.StackedListHeader {
  padding: stacked-list-header(padding-top) (get-spacing(tighter) + 0.8rem) stacked-list-header(padding-bottom);
  min-height: stacked-list-item();
  background-color: get-color(coal, dark);

  @media screen and (min-width: get-breakpoint(desktop)) {
    min-height: stacked-list-item(base, desktop);
  }

  p {
    margin-top: 0.2em;
    font-size: get-type-scale(paragraph);
    color: white;

    @media screen and (min-width: get-breakpoint(tablet)) {
      font-size: get-type-scale(paragraph, tablet);
    }

    @media screen and (min-width: get-breakpoint(desktop)) {
      font-size: get-type-scale(paragraph, desktop);
    }
  }
}

.StackedList {
  margin-top: -$border-size-unit;

/*
  // How do you allow items to be moved back into an emptied container?
  min-width: stacked-list-item();
  min-height: stacked-list-item();
  box-shadow: inset 0 0 0 $border-size-unit get-color(coal);
  background-color: get-color(ash);
*/
}

.StackedListItem {
  cursor: get-cursor();

  &:nth-child(1n+2) {
    margin-top: -$border-size-unit;
  }

  .StackedListItem--isCloned:first-child + & {
    margin-top: 0;
  }
}

.StackedListContent {
  position: relative;
  display: flex;
  align-items: center;
  padding: get-spacing(tighter);
  min-height: stacked-list-item();
  background-color: get-color(ash, light);
  color: get-color(coal, dark);
  border: $border-size-unit solid get-color(coal, dark); // get-border();
  transition:
    color get-duration(fast) get-easing(),
    background-color get-duration(fast) get-easing(),
    border-color get-duration(fast) get-easing(),
    transform get-duration() get-easing(bungie);

  @media screen and (min-width: get-breakpoint(desktop)) {
    min-height: stacked-list-item(base, desktop);
  }

  .Heading {
    flex: 1 1 auto;
  }

  .DragHandle,
  .NopeHandle {
    flex: 0 0 $handle-size;
    margin-left: get-spacing(tight);
  }

  @include halftone-bg(after);

  &::before {
    content: '';
    position: absolute;
    top: -$border-size-unit;
    right: -$border-size-unit;
    left: -$border-size-unit;
    display: block;
    height: $border-size-unit;
    background-color: get-color(coal, dark);
    opacity: 0;
    transition:
      background-color get-duration(fast) get-easing(),
      opacity get-duration(fast) get-easing();
  }
}
