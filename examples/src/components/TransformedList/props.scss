////
/// Components
/// TransformedList props
////

$transformed-list-block-name: unquote('TransformedListItem');
$transformed-item-count: 4;

///
/// Size calc functions

@function transformed-list-height($height, $spacing) {
  @return $height - (
    ($spacing / 2) * ($transformed-item-count - 1)
  );
}

///
/// Style prop maps

$transformed-list-item: (
  spacing: (
    base: get-spacing(),
    tablet: get-spacing(loose),
  ),
  width: (
    base: 24rem,
    tablet: 42rem,
  ),
  height: (
    base: 38rem,
    tablet: 58rem,
  ),
  transform: perspective(90rem) rotateX(60deg),
);

@function transformed-list-item($group: $threads-default-value, $variant: $threads-default-value) {
  @return threads-value-get($transformed-list-item, $group, $variant);
}

$transformed-shadow: (
  bottom: (
    base: transformed-list-item(spacing) / 2,
    tablet: transformed-list-item(spacing, tablet) / 2,
  ),
  height: (
    base: transformed-list-item(spacing),
    tablet: transformed-list-item(spacing, tablet),
  ),
  offset: (
    base: 0.8rem,
  ),
);

@function transformed-shadow($group: $threads-default-value, $variant: $threads-default-value) {
  @return threads-value-get($transformed-shadow, $group, $variant);
}

$transformed-list: (
  height: (
    base: transformed-list-height(
      transformed-list-item(height),
      transformed-list-item(spacing)
    ),
    tablet: transformed-list-height(
      transformed-list-item(height, tablet),
      transformed-list-item(spacing, tablet)
    ),
  ),
);

@function transformed-list($group: $threads-default-value, $variant: $threads-default-value) {
  @return threads-value-get($transformed-list, $group, $variant);
}

///
/// Mixins

@mixin transformed-item-offset($breakpoint: $threads-default-value) {
  $adjusted-top-offset: -(
    (transformed-list-item(width, $breakpoint) / $transformed-item-count) +
    (transformed-list-item(spacing, $breakpoint) / 2)
  );

  @for $i from 1 through $transformed-item-count {
    &:nth-child(#{$i}),
    &.TransformedListItem--isCloned ~ .TransformedListItem:nth-child(#{$i + 1}) {
      top: $adjusted-top-offset;
    }

    $adjusted-top-offset: $adjusted-top-offset + transformed-list-item(spacing, $breakpoint);
  }
}
